/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
import { EntitySchema } from "../models/EntitySchema.ts";
import React, { useContext, useState } from "react";
import { Wizard } from "@cloudscape-design/components";
import { CodeView } from "@cloudscape-design/code-view";
import javascriptHighlight from "@cloudscape-design/code-view/highlight/javascript";
import ToolsApiClient from "../api_clients/toolsApiClient.ts";
import { useNavigate } from "react-router-dom";
import { NotificationContext } from "../contexts/NotificationContext.tsx";
import { FileImportStep } from "../components/PipelineTemplateJsonFileImport.tsx";
import { apiActionErrorHandler, parsePUTResponseErrors } from "../resources/recordFunctions.ts";

export const PipelineTemplatesImport = (props: { schemas: Record<string, EntitySchema> }) => {
  const [committing, setCommitting] = useState(false);
  const navigate = useNavigate();
  const { addNotification } = useContext(NotificationContext);

  const [fileJSON, setFileJSON] = useState<Array<object> | null>(null);

  const [activeStepIndex, setActiveStepIndex] = useState(0);

  async function submit() {
    setCommitting(true);
    const action = "Import";
    const schema = "Pipeline templates";
    const toolsApiClient = new ToolsApiClient();
    try {
      const response = await toolsApiClient.postPipelineTemplateImport(fileJSON);
      setCommitting(false);
      if (response["errors"]) {
        let errorsReturned = parsePUTResponseErrors(response["errors"]).join(",");
        addNotification({
          type: "error",
          dismissible: true,
          header: `${action} ${schema}`,
          content: errorsReturned,
        });
      } else {
        addNotification({
          type: "success",
          dismissible: true,
          header: `${action} ${schema}`,
          content: `${schema} imported successfully`,
        });
      }
      navigate({
        pathname: "/pipeline_templates",
      });
    } catch (e) {
      setCommitting(false);
      apiActionErrorHandler(action, schema, e, addNotification);
    }
  }

  return (
    <Wizard
      isLoadingNextStep={committing}
      i18nStrings={{
        stepNumberLabel: (stepNumber) => `Step ${stepNumber}`,
        collapsedStepsLabel: (stepNumber, stepsCount) => `Step ${stepNumber} of ${stepsCount}`,
        navigationAriaLabel: "Steps",
        cancelButton: "Cancel",
        previousButton: "Previous",
        nextButton: "Next",
        submitButton: "Submit",
        optional: "optional",
      }}
      onNavigate={({ detail }) => setActiveStepIndex(detail.requestedStepIndex)}
      onSubmit={submit}
      onCancel={() => {
        navigate({
          pathname: "/pipeline_templates",
        });
      }}
      activeStepIndex={activeStepIndex}
      steps={[
        {
          title: "Select a file",
          content: <FileImportStep setFileJSON={setFileJSON}></FileImportStep>,
          description:
            "Select a .json file with pipeline templates that has previously been generated by Cloud Migration Factory.",
        },

        {
          title: "Upload data",
          description: "Press the submit button to create the pipeline templates and tasks.",
          content: (
            <CodeView
              data-testid="code-view"
              content={JSON.stringify(fileJSON, null, 2)}
              highlight={javascriptHighlight}
              lineNumbers
            />
          ),
        },
      ]}
    />
  );
};
